<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  BlockMarkets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BlockMarkets Cryptocurrency API
 *
 * The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BlockMarkets\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BlockMarkets\ApiException;
use BlockMarkets\Configuration;
use BlockMarkets\HeaderSelector;
use BlockMarkets\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  BlockMarkets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation benchmarkRate
     *
     * Returns the latest available benchmark rates for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function benchmarkRate($symbol)
    {
        list($response) = $this->benchmarkRateWithHttpInfo($symbol);
        return $response;
    }

    /**
     * Operation benchmarkRateWithHttpInfo
     *
     * Returns the latest available benchmark rates for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function benchmarkRateWithHttpInfo($symbol)
    {
        $request = $this->benchmarkRateRequest($symbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation benchmarkRateAsync
     *
     * Returns the latest available benchmark rates for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function benchmarkRateAsync($symbol)
    {
        return $this->benchmarkRateAsyncWithHttpInfo($symbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation benchmarkRateAsyncWithHttpInfo
     *
     * Returns the latest available benchmark rates for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function benchmarkRateAsyncWithHttpInfo($symbol)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->benchmarkRateRequest($symbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'benchmarkRate'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function benchmarkRateRequest($symbol)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling benchmarkRate'
            );
        }

        $resourcePath = '/v1/rates/benchmark/{symbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation benchmarkRateHistory
     *
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  string $close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function benchmarkRateHistory($symbol, $close = null)
    {
        list($response) = $this->benchmarkRateHistoryWithHttpInfo($symbol, $close);
        return $response;
    }

    /**
     * Operation benchmarkRateHistoryWithHttpInfo
     *
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  string $close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function benchmarkRateHistoryWithHttpInfo($symbol, $close = null)
    {
        $request = $this->benchmarkRateHistoryRequest($symbol, $close);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation benchmarkRateHistoryAsync
     *
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  string $close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function benchmarkRateHistoryAsync($symbol, $close = null)
    {
        return $this->benchmarkRateHistoryAsyncWithHttpInfo($symbol, $close)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation benchmarkRateHistoryAsyncWithHttpInfo
     *
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  string $close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function benchmarkRateHistoryAsyncWithHttpInfo($symbol, $close = null)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->benchmarkRateHistoryRequest($symbol, $close);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'benchmarkRateHistory'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  string $close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function benchmarkRateHistoryRequest($symbol, $close = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling benchmarkRateHistory'
            );
        }

        $resourcePath = '/v1/rates/benchmark/{symbol}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($close !== null) {
            $queryParams['close'] = ObjectSerializer::toQueryValue($close);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAssetMarkets
     *
     * Returns a list of all markets (base and quote) for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listAssetMarkets($symbol)
    {
        list($response) = $this->listAssetMarketsWithHttpInfo($symbol);
        return $response;
    }

    /**
     * Operation listAssetMarketsWithHttpInfo
     *
     * Returns a list of all markets (base and quote) for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssetMarketsWithHttpInfo($symbol)
    {
        $request = $this->listAssetMarketsRequest($symbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAssetMarketsAsync
     *
     * Returns a list of all markets (base and quote) for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetMarketsAsync($symbol)
    {
        return $this->listAssetMarketsAsyncWithHttpInfo($symbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssetMarketsAsyncWithHttpInfo
     *
     * Returns a list of all markets (base and quote) for a specific asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetMarketsAsyncWithHttpInfo($symbol)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listAssetMarketsRequest($symbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssetMarkets'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAssetMarketsRequest($symbol)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling listAssetMarkets'
            );
        }

        $resourcePath = '/v1/assets/{symbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAssets
     *
     * Returns a list of supported assets.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listAssets()
    {
        list($response) = $this->listAssetsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listAssetsWithHttpInfo
     *
     * Returns a list of supported assets.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssetsWithHttpInfo()
    {
        $request = $this->listAssetsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAssetsAsync
     *
     * Returns a list of supported assets.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetsAsync()
    {
        return $this->listAssetsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssetsAsyncWithHttpInfo
     *
     * Returns a list of supported assets.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetsAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listAssetsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssets'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAssetsRequest()
    {

        $resourcePath = '/v1/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listBenchmarkRates
     *
     * Returns a list of supported USD benchmark rates.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listBenchmarkRates()
    {
        list($response) = $this->listBenchmarkRatesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listBenchmarkRatesWithHttpInfo
     *
     * Returns a list of supported USD benchmark rates.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBenchmarkRatesWithHttpInfo()
    {
        $request = $this->listBenchmarkRatesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listBenchmarkRatesAsync
     *
     * Returns a list of supported USD benchmark rates.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBenchmarkRatesAsync()
    {
        return $this->listBenchmarkRatesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listBenchmarkRatesAsyncWithHttpInfo
     *
     * Returns a list of supported USD benchmark rates.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBenchmarkRatesAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listBenchmarkRatesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listBenchmarkRates'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listBenchmarkRatesRequest()
    {

        $resourcePath = '/v1/rates/benchmark';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listExchangeMarkets
     *
     * Returns a list of markets for a specific exchange.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listExchangeMarkets($exchange)
    {
        list($response) = $this->listExchangeMarketsWithHttpInfo($exchange);
        return $response;
    }

    /**
     * Operation listExchangeMarketsWithHttpInfo
     *
     * Returns a list of markets for a specific exchange.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listExchangeMarketsWithHttpInfo($exchange)
    {
        $request = $this->listExchangeMarketsRequest($exchange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listExchangeMarketsAsync
     *
     * Returns a list of markets for a specific exchange.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExchangeMarketsAsync($exchange)
    {
        return $this->listExchangeMarketsAsyncWithHttpInfo($exchange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listExchangeMarketsAsyncWithHttpInfo
     *
     * Returns a list of markets for a specific exchange.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExchangeMarketsAsyncWithHttpInfo($exchange)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listExchangeMarketsRequest($exchange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listExchangeMarkets'
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listExchangeMarketsRequest($exchange)
    {
        // verify the required parameter 'exchange' is set
        if ($exchange === null || (is_array($exchange) && count($exchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange when calling listExchangeMarkets'
            );
        }

        $resourcePath = '/v1/exchanges/{exchange}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($exchange !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange' . '}',
                ObjectSerializer::toPathValue($exchange),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listExchanges
     *
     * Returns a list of supported exchanges.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listExchanges()
    {
        list($response) = $this->listExchangesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listExchangesWithHttpInfo
     *
     * Returns a list of supported exchanges.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listExchangesWithHttpInfo()
    {
        $request = $this->listExchangesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listExchangesAsync
     *
     * Returns a list of supported exchanges.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExchangesAsync()
    {
        return $this->listExchangesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listExchangesAsyncWithHttpInfo
     *
     * Returns a list of supported exchanges.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExchangesAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listExchangesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listExchanges'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listExchangesRequest()
    {

        $resourcePath = '/v1/exchanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMarkets
     *
     * Returns a list of supported markets.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listMarkets()
    {
        list($response) = $this->listMarketsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listMarketsWithHttpInfo
     *
     * Returns a list of supported markets.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMarketsWithHttpInfo()
    {
        $request = $this->listMarketsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMarketsAsync
     *
     * Returns a list of supported markets.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMarketsAsync()
    {
        return $this->listMarketsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMarketsAsyncWithHttpInfo
     *
     * Returns a list of supported markets.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMarketsAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listMarketsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMarkets'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listMarketsRequest()
    {

        $resourcePath = '/v1/markets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPairMarkets
     *
     * Returns a list of markets for a specific asset pair.
     *
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listPairMarkets($pair)
    {
        list($response) = $this->listPairMarketsWithHttpInfo($pair);
        return $response;
    }

    /**
     * Operation listPairMarketsWithHttpInfo
     *
     * Returns a list of markets for a specific asset pair.
     *
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPairMarketsWithHttpInfo($pair)
    {
        $request = $this->listPairMarketsRequest($pair);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPairMarketsAsync
     *
     * Returns a list of markets for a specific asset pair.
     *
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPairMarketsAsync($pair)
    {
        return $this->listPairMarketsAsyncWithHttpInfo($pair)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPairMarketsAsyncWithHttpInfo
     *
     * Returns a list of markets for a specific asset pair.
     *
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPairMarketsAsyncWithHttpInfo($pair)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listPairMarketsRequest($pair);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPairMarkets'
     *
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPairMarketsRequest($pair)
    {
        // verify the required parameter 'pair' is set
        if ($pair === null || (is_array($pair) && count($pair) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pair when calling listPairMarkets'
            );
        }

        $resourcePath = '/v1/pairs/{pair}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pair !== null) {
            $resourcePath = str_replace(
                '{' . 'pair' . '}',
                ObjectSerializer::toPathValue($pair),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPairs
     *
     * Returns a list of supported asset pairs.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listPairs()
    {
        list($response) = $this->listPairsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listPairsWithHttpInfo
     *
     * Returns a list of supported asset pairs.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPairsWithHttpInfo()
    {
        $request = $this->listPairsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPairsAsync
     *
     * Returns a list of supported asset pairs.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPairsAsync()
    {
        return $this->listPairsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPairsAsyncWithHttpInfo
     *
     * Returns a list of supported asset pairs.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPairsAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listPairsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPairs'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPairsRequest()
    {

        $resourcePath = '/v1/pairs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSpotRates
     *
     * Returns a list of supported USD spot rates.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function listSpotRates()
    {
        list($response) = $this->listSpotRatesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listSpotRatesWithHttpInfo
     *
     * Returns a list of supported USD spot rates.
     *
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSpotRatesWithHttpInfo()
    {
        $request = $this->listSpotRatesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSpotRatesAsync
     *
     * Returns a list of supported USD spot rates.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpotRatesAsync()
    {
        return $this->listSpotRatesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSpotRatesAsyncWithHttpInfo
     *
     * Returns a list of supported USD spot rates.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpotRatesAsyncWithHttpInfo()
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->listSpotRatesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSpotRates'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSpotRatesRequest()
    {

        $resourcePath = '/v1/rates/spot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketBook
     *
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function marketBook($exchange, $pair)
    {
        list($response) = $this->marketBookWithHttpInfo($exchange, $pair);
        return $response;
    }

    /**
     * Operation marketBookWithHttpInfo
     *
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketBookWithHttpInfo($exchange, $pair)
    {
        $request = $this->marketBookRequest($exchange, $pair);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketBookAsync
     *
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketBookAsync($exchange, $pair)
    {
        return $this->marketBookAsyncWithHttpInfo($exchange, $pair)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketBookAsyncWithHttpInfo
     *
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketBookAsyncWithHttpInfo($exchange, $pair)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->marketBookRequest($exchange, $pair);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketBook'
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketBookRequest($exchange, $pair)
    {
        // verify the required parameter 'exchange' is set
        if ($exchange === null || (is_array($exchange) && count($exchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange when calling marketBook'
            );
        }
        // verify the required parameter 'pair' is set
        if ($pair === null || (is_array($pair) && count($pair) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pair when calling marketBook'
            );
        }

        $resourcePath = '/v1/markets/{exchange}/{pair}/book';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($exchange !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange' . '}',
                ObjectSerializer::toPathValue($exchange),
                $resourcePath
            );
        }
        // path params
        if ($pair !== null) {
            $resourcePath = str_replace(
                '{' . 'pair' . '}',
                ObjectSerializer::toPathValue($pair),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketOHLCV
     *
     * Returns OHLCV history for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function marketOHLCV($exchange, $pair, $limit = null, $interval = null, $start = null, $end = null)
    {
        list($response) = $this->marketOHLCVWithHttpInfo($exchange, $pair, $limit, $interval, $start, $end);
        return $response;
    }

    /**
     * Operation marketOHLCVWithHttpInfo
     *
     * Returns OHLCV history for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketOHLCVWithHttpInfo($exchange, $pair, $limit = null, $interval = null, $start = null, $end = null)
    {
        $request = $this->marketOHLCVRequest($exchange, $pair, $limit, $interval, $start, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketOHLCVAsync
     *
     * Returns OHLCV history for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketOHLCVAsync($exchange, $pair, $limit = null, $interval = null, $start = null, $end = null)
    {
        return $this->marketOHLCVAsyncWithHttpInfo($exchange, $pair, $limit, $interval, $start, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketOHLCVAsyncWithHttpInfo
     *
     * Returns OHLCV history for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketOHLCVAsyncWithHttpInfo($exchange, $pair, $limit = null, $interval = null, $start = null, $end = null)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->marketOHLCVRequest($exchange, $pair, $limit, $interval, $start, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketOHLCV'
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketOHLCVRequest($exchange, $pair, $limit = null, $interval = null, $start = null, $end = null)
    {
        // verify the required parameter 'exchange' is set
        if ($exchange === null || (is_array($exchange) && count($exchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange when calling marketOHLCV'
            );
        }
        // verify the required parameter 'pair' is set
        if ($pair === null || (is_array($pair) && count($pair) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pair when calling marketOHLCV'
            );
        }

        $resourcePath = '/v1/markets/{exchange}/{pair}/ohlcv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($exchange !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange' . '}',
                ObjectSerializer::toPathValue($exchange),
                $resourcePath
            );
        }
        // path params
        if ($pair !== null) {
            $resourcePath = str_replace(
                '{' . 'pair' . '}',
                ObjectSerializer::toPathValue($pair),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketTicker
     *
     * Returns the latest ticker for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function marketTicker($exchange, $pair)
    {
        list($response) = $this->marketTickerWithHttpInfo($exchange, $pair);
        return $response;
    }

    /**
     * Operation marketTickerWithHttpInfo
     *
     * Returns the latest ticker for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketTickerWithHttpInfo($exchange, $pair)
    {
        $request = $this->marketTickerRequest($exchange, $pair);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketTickerAsync
     *
     * Returns the latest ticker for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketTickerAsync($exchange, $pair)
    {
        return $this->marketTickerAsyncWithHttpInfo($exchange, $pair)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketTickerAsyncWithHttpInfo
     *
     * Returns the latest ticker for a market pair.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketTickerAsyncWithHttpInfo($exchange, $pair)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->marketTickerRequest($exchange, $pair);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketTicker'
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketTickerRequest($exchange, $pair)
    {
        // verify the required parameter 'exchange' is set
        if ($exchange === null || (is_array($exchange) && count($exchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange when calling marketTicker'
            );
        }
        // verify the required parameter 'pair' is set
        if ($pair === null || (is_array($pair) && count($pair) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pair when calling marketTicker'
            );
        }

        $resourcePath = '/v1/markets/{exchange}/{pair}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($exchange !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange' . '}',
                ObjectSerializer::toPathValue($exchange),
                $resourcePath
            );
        }
        // path params
        if ($pair !== null) {
            $resourcePath = str_replace(
                '{' . 'pair' . '}',
                ObjectSerializer::toPathValue($pair),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketTrades
     *
     * Returns trades for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function marketTrades($exchange, $pair, $limit = null, $start = null, $end = null)
    {
        list($response) = $this->marketTradesWithHttpInfo($exchange, $pair, $limit, $start, $end);
        return $response;
    }

    /**
     * Operation marketTradesWithHttpInfo
     *
     * Returns trades for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketTradesWithHttpInfo($exchange, $pair, $limit = null, $start = null, $end = null)
    {
        $request = $this->marketTradesRequest($exchange, $pair, $limit, $start, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketTradesAsync
     *
     * Returns trades for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketTradesAsync($exchange, $pair, $limit = null, $start = null, $end = null)
    {
        return $this->marketTradesAsyncWithHttpInfo($exchange, $pair, $limit, $start, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketTradesAsyncWithHttpInfo
     *
     * Returns trades for a market pair. Requires premium subscription.
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketTradesAsyncWithHttpInfo($exchange, $pair, $limit = null, $start = null, $end = null)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->marketTradesRequest($exchange, $pair, $limit, $start, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketTrades'
     *
     * @param  string $exchange The 4-char exchange code (see /exchanges) (required)
     * @param  string $pair The asset pair (see /pairs) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketTradesRequest($exchange, $pair, $limit = null, $start = null, $end = null)
    {
        // verify the required parameter 'exchange' is set
        if ($exchange === null || (is_array($exchange) && count($exchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange when calling marketTrades'
            );
        }
        // verify the required parameter 'pair' is set
        if ($pair === null || (is_array($pair) && count($pair) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pair when calling marketTrades'
            );
        }

        $resourcePath = '/v1/markets/{exchange}/{pair}/trades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($exchange !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange' . '}',
                ObjectSerializer::toPathValue($exchange),
                $resourcePath
            );
        }
        // path params
        if ($pair !== null) {
            $resourcePath = str_replace(
                '{' . 'pair' . '}',
                ObjectSerializer::toPathValue($pair),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spotRate
     *
     * Returns the last USD spot rate for an asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function spotRate($symbol)
    {
        list($response) = $this->spotRateWithHttpInfo($symbol);
        return $response;
    }

    /**
     * Operation spotRateWithHttpInfo
     *
     * Returns the last USD spot rate for an asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function spotRateWithHttpInfo($symbol)
    {
        $request = $this->spotRateRequest($symbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spotRateAsync
     *
     * Returns the last USD spot rate for an asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateAsync($symbol)
    {
        return $this->spotRateAsyncWithHttpInfo($symbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spotRateAsyncWithHttpInfo
     *
     * Returns the last USD spot rate for an asset.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateAsyncWithHttpInfo($symbol)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->spotRateRequest($symbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spotRate'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function spotRateRequest($symbol)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling spotRate'
            );
        }

        $resourcePath = '/v1/rates/spot/{symbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spotRateHistory
     *
     * Returns historical spot rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function spotRateHistory($symbol, $limit = null, $start = null, $end = null)
    {
        list($response) = $this->spotRateHistoryWithHttpInfo($symbol, $limit, $start, $end);
        return $response;
    }

    /**
     * Operation spotRateHistoryWithHttpInfo
     *
     * Returns historical spot rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function spotRateHistoryWithHttpInfo($symbol, $limit = null, $start = null, $end = null)
    {
        $request = $this->spotRateHistoryRequest($symbol, $limit, $start, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spotRateHistoryAsync
     *
     * Returns historical spot rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateHistoryAsync($symbol, $limit = null, $start = null, $end = null)
    {
        return $this->spotRateHistoryAsyncWithHttpInfo($symbol, $limit, $start, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spotRateHistoryAsyncWithHttpInfo
     *
     * Returns historical spot rates for an asset. Requires premium subscription.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateHistoryAsyncWithHttpInfo($symbol, $limit = null, $start = null, $end = null)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->spotRateHistoryRequest($symbol, $limit, $start, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spotRateHistory'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function spotRateHistoryRequest($symbol, $limit = null, $start = null, $end = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling spotRateHistory'
            );
        }

        $resourcePath = '/v1/rates/spot/{symbol}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spotRateOHLCV
     *
     * Returns the OHLCV history for a spot rate.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BlockMarkets\Model\ModelEmpty
     */
    public function spotRateOHLCV($symbol, $limit = null, $interval = null, $start = null, $end = null)
    {
        list($response) = $this->spotRateOHLCVWithHttpInfo($symbol, $limit, $interval, $start, $end);
        return $response;
    }

    /**
     * Operation spotRateOHLCVWithHttpInfo
     *
     * Returns the OHLCV history for a spot rate.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \BlockMarkets\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BlockMarkets\Model\ModelEmpty, HTTP status code, HTTP response headers (array of strings)
     */
    public function spotRateOHLCVWithHttpInfo($symbol, $limit = null, $interval = null, $start = null, $end = null)
    {
        $request = $this->spotRateOHLCVRequest($symbol, $limit, $interval, $start, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BlockMarkets\Model\ModelEmpty' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BlockMarkets\Model\ModelEmpty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BlockMarkets\Model\ModelEmpty';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BlockMarkets\Model\ModelEmpty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spotRateOHLCVAsync
     *
     * Returns the OHLCV history for a spot rate.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateOHLCVAsync($symbol, $limit = null, $interval = null, $start = null, $end = null)
    {
        return $this->spotRateOHLCVAsyncWithHttpInfo($symbol, $limit, $interval, $start, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spotRateOHLCVAsyncWithHttpInfo
     *
     * Returns the OHLCV history for a spot rate.
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spotRateOHLCVAsyncWithHttpInfo($symbol, $limit = null, $interval = null, $start = null, $end = null)
    {
        $returnType = '\BlockMarkets\Model\ModelEmpty';
        $request = $this->spotRateOHLCVRequest($symbol, $limit, $interval, $start, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spotRateOHLCV'
     *
     * @param  string $symbol The asset symbol (see /assets) (required)
     * @param  int $limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)
     * @param  int $interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)
     * @param  string $start Start datetime in ISO 8601 (optional)
     * @param  string $end End datetime in ISO 8601 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function spotRateOHLCVRequest($symbol, $limit = null, $interval = null, $start = null, $end = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling spotRateOHLCV'
            );
        }

        $resourcePath = '/v1/rates/spot/{symbol}/ohlcv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
